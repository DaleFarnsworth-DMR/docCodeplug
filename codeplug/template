
// Record types
const (
{{- range $r := $.SortedRecords}}
	Rt{{$r.Type}} RecordType = "{{call $.RecordTypeString $r.Type}}"
{{- end}}
)

// Field types
const (
{{- range $f := $.SortedFields}}
	Ft{{$f.Type}} FieldType = "{{call $.FieldTypeString $f.Type}}"
{{- end}}
)

// The value types a field may contain
const (
{{- range $vt := $.ValueTypes}}
	Vt{{call $.Sanitize $vt}} ValueType = "{{$vt}}"
{{- end}}
)

// newValue returns a new value of the given ValueType
func newValue(vt ValueType) value {
	switch vt {
	{{- range $vt := $.ValueTypes}}
	case Vt{{call $.Sanitize $vt}}:
		return new({{$vt}})
	{{- end}}
	}

	return nil
}

var codeplugInfos = []*CodeplugInfo{
{{- range $c := $.Codeplugs}}
	&cp{{call $.Sanitize $c.Type}},
{{- end}}
}

{{- range $c := $.Codeplugs}}

var cp{{call $.Sanitize $c.Type}} = CodeplugInfo{
	Type: "{{$c.Type}}",
	Models: []string{
	{{- range $name := $c.Models}}
		"{{$name}}",
	{{- end}}
	},
	Ext: "{{$c.Ext}}",
	RdtSize: {{$c.RdtSize}},
	HeaderSize: {{$c.HeaderSize}},
	TrailerOffset: {{$c.TrailerOffset}},
	TrailerSize: {{$c.TrailerSize}},
	RecordInfos: []*recordInfo{
	{{- range $rt := $c.RecordTypes}}
		&ri{{$rt}},
	{{- end}}
	},
}
{{- end}}

{{- range $r := $.SortedRecords}}

var ri{{$r.Type}} = recordInfo{
	rType: Rt{{$r.Type}},
	typeName: "{{$r.TypeName}}",
	max: {{$r.Max}},
	offset: {{$r.Offset}},
	size: {{$r.Size}},
{{- if $r.NamePrefix}}
	namePrefix: "{{$r.NamePrefix}}",
{{- end}}
{{- if $r.Names}}
	names: []string{
	{{- range $s := $r.Names}}
		"{{$s}}",
	{{- end}}
	},
{{- end}}
{{- if $r.DelDesc}}{{$d := $r.DelDesc}}
	delDesc: &delDesc{
		offset: {{$d.Offset}},
		size: {{$d.Size}},
		value: {{$d.Value}},
	},
{{- end}}
	fieldInfos: []*fieldInfo{
	{{- range $ft := $r.FieldTypes}}
		&fi{{$ft}},
	{{- end}}
	},
}
{{ end}}

{{- range $f := $.SortedFields}}

var fi{{$f.Type}} = fieldInfo{
	fType: Ft{{$f.Type}},
	typeName: "{{$f.TypeName}}",
	max: {{$f.Max}},
	bitOffset: {{$f.BitOffset}},
	bitSize: {{$f.BitSize}},
	valueType: Vt{{call $.Sanitize $f.ValueType}},
{{- if $f.DefaultValue}}
	defaultValue: "{{$f.DefaultValue}}",
{{- end}}
{{- if $f.Strings}}
	strings: &[]string{
	{{- range $s := $f.Strings}}
		"{{$s}}",
	{{- end}}
	},
{{- end}}
{{- if $f.Span}}{{$s := $f.Span}}
	span: &Span{
		min: {{$s.Min}},
		max: {{$s.Max}},
	{{- if $s.Scale}}
		scale: {{$s.Scale}},
	{{- end}}
	{{- if $s.Interval}}
		interval: {{$s.Interval}},
	{{- end}}
	{{- if $s.MinString}}
		minString: "{{$s.MinString}}",
	{{- end}}
	},
{{- end}}
{{- if $f.IndexedStrings}}
	indexedStrings: &[]IndexedString{
	{{- range $i := $f.IndexedStrings}}
		IndexedString{ {{$i.Index}}, "{{$i.String}}"},
	{{- end}}
	},
{{- end}}
{{- if $f.ListType}}
	listRecordType: Rt{{$f.ListType}},
{{- end}}
{{- if $f.Enables}}
	enables: []FieldType{
	{{- range $e := $f.Enables}}
		Ft{{$e}},
	{{- end}}
	},
{{- end}}
{{- if $f.EnablerType}}
	enablerType: Ft{{$f.EnablerType}},
{{- end}}
{{- if $f.Enablers}}
	enablers: []enabler{
	{{- range $i := $f.Enablers}}
		enabler{
			value: "{{$i.Value}}",
			enable: {{$i.Enable}},
		},
	{{- end}}
	},
{{- end}}
{{- if $f.ExtSize}}
	extOffset: {{$f.ExtOffset}},
	extSize: {{$f.ExtSize}},
	extIndex: {{$f.ExtIndex}},
	extBitOffset: {{$f.ExtBitOffset}},
{{- end}}
}
{{- end}}

var rTypeFieldRefs = map[RecordType][]fieldRef {
{{- range $rts := $.ListRecordTypes}}
	"{{$rts}}": []fieldRef {
	{{- range $fr := index $.FieldRefsMap $rts}}
		fieldRef{
			rType: RecordType("{{$fr.RType}}"),
			fType: FieldType("{{$fr.FType}}"),
		},
	{{- end}}
	},
{{- end}}
}
